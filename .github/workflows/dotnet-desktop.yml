name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: ubuntu-latest

    env:
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_ORG_KEY: ${{ secrets.SONAR_ORG_KEY }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    # Install Mosquitto and start the broker
    - name: Install and start Mosquitto
      run: |
        sudo apt-get update
        sudo apt-get install -y mosquitto mosquitto-clients
        sudo service mosquitto start
        
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Build LoggingService
    - name: Build LoggingService
      run: |
        dotnet restore
        dotnet build --configuration ${{ matrix.configuration }}
        mkdir -p LoggingServiceArtifact
        cp -r LoggingService/bin/${{ matrix.configuration }}/* LoggingServiceArtifact/
      working-directory: ${{ github.workspace }}

    # Publish the LoggingService artifact
    - name: Publish LoggingService Artifact
      uses: actions/upload-artifact@v2
      with:
        name: LoggingService
        path: LoggingServiceArtifact

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test --logger:"trx;LogFileName=UnitTests.trx" --results-directory=TestResults

    # Download the correct version of Java for Sonar Cloud
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'zulu'
        
    # Static Analysis
    - name: Run static analysis with SonarQube
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:"${{ env.SONAR_PROJECT_KEY }}" /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" /d:sonar.token="${{ env.SONAR_TOKEN }}" /o:"${{ env.SONAR_ORG_KEY }}" /d:sonar.projectBaseDir="${{ github.workspace }}"
        dotnet build
        dotnet sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"
