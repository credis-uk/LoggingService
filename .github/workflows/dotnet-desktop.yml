name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    # Download Mosquitto
    - name: Download Mosquitto installer
      run: |
        $mosquittoUrl = "https://mosquitto.org/files/binary/win64/mosquitto-2.0.12-install-windows-x64.exe"
        Invoke-WebRequest -Uri $mosquittoUrl -OutFile "$env:TEMP\mosquitto.exe"

    # Run the Mqtt Broker for unit tests
    - name: Run Mosquitto installer
      run: |
        $logFilePath = "$env:TEMP\mosquitto.log"
        Start-Process -FilePath "$env:TEMP\mosquitto.exe" -ArgumentList "/S /D=$env:TEMP /LOG=$logFilePath" -Wait
        Get-Content $logFilePath
        
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add MSBuild to the PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Build LoggingService
    - name: Build LoggingService
      run: |
        $msbuildPath = Get-Command MSBuild.exe | Select-Object -ExpandProperty Source
        & "$msbuildPath" /t:restore
        & "$msbuildPath" /t:build /p:Configuration=${{ matrix.configuration }}
        mkdir LoggingServiceArtifact
        cp -r LoggingService/bin/${{ matrix.configuration }}/* LoggingServiceArtifact/
      working-directory: ${{ github.workspace }}

    # Publish the LoggingService artifact
    - name: Publish LoggingService Artifact
      uses: actions/upload-artifact@v2
      with:
        name: LoggingService
        path: LoggingServiceArtifact

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Static Analysis
    - name: Run static analysis with SonarQube
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:"${{ env.SONAR_PROJECT_KEY }}" /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" /d:sonar.login="${{ env.SONAR_TOKEN }}"
        dotnet build
        dotnet sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"
